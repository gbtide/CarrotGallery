apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'dagger.hilt.android.plugin'
apply plugin: 'androidx.navigation.safeargs.kotlin'

android {
    compileSdkVersion project.compileSdkVersion
    buildToolsVersion project.buildToolsVersion

    defaultConfig {
        applicationId "com.carrot.gallery"
        minSdkVersion project.minSdkVersion
        targetSdkVersion project.targetSdkVersion
        versionCode 2
        versionName "1.0.1"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        Properties properties = new Properties()
        properties.load(project.rootProject.file('properties/project.properties').newDataInputStream())
        buildConfigField("String", "TEMP", properties.get('temp'))
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    buildFeatures {
        dataBinding = true
    }

    // 프로젝트 자바 8 설정
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions.jvmTarget = "1.8"

}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation "androidx.appcompat:appcompat:${project.appcompat}"

    // project module.
    // memo. shared 내부에 model 이 api 로 연결
    implementation(project(':core'))

    // ktx
    // memo. 왜 구글 오픈소스에서는 core 모듈 ktx 를 api 로 안하고 implementation 으로 했을까
    // 김경훈 생각 : core 모듈보다 app(ui 연관) 모듈에 더 필요한 ktx 부가 라이브러리 들이 있는데
    // 중복되는 디펜던시만 빼서 core 에 api 를 걸어서 관리하면
    // 양쪽 모듈 gradle 을 모두봐야 ktx 라이브러리 스펙이 온전히 관리되는 이슈가 있을 것 같다.
    // 어차피 버저닝 관리 잘 되고 있으니, 관리상 양쪽 모두에 implementation 으로 관리하는 것 같다.
    implementation "androidx.core:core-ktx:${project.core_ktx}"
    implementation "androidx.activity:activity-ktx:${project.activity_ktx}"
    implementation "androidx.fragment:fragment-ktx:${project.fragment_ktx}"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:${project.lifecycle_ktx}"
    implementation "androidx.lifecycle:lifecycle-viewmodel-savedstate:${project.lifecycle_ktx}"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:${project.lifecycle_ktx}"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:${project.lifecycle_ktx}"

    // hilt
    implementation "com.google.dagger:hilt-android:${project.hilt_android}"
    implementation "androidx.hilt:hilt-lifecycle-viewmodel:${project.hilt_lifecycle_viewmodel}"
    kapt "com.google.dagger:hilt-android-compiler:${project.hilt_android_compiler}"

    // constraint layout
    implementation "androidx.constraintlayout:constraintlayout:${project.constraintlayout}"

    // material
    api "com.google.android.material:material:${project.material}"

    // swiperefreshlayout
    implementation "androidx.swiperefreshlayout:swiperefreshlayout:${project.swiperefreshlayout}"

    // glide
    implementation "com.github.bumptech.glide:glide:${project.glide}"
    kapt "com.github.bumptech.glide:compiler:${project.glide}"
    implementation "com.github.bumptech.glide:annotations:${project.glide}"

    // navigation
    implementation "androidx.navigation:navigation-fragment-ktx:${project.navigation}"
    implementation "androidx.navigation:navigation-ui-ktx:${project.navigation}"

    // image viewer
    // 외부 라이브러리
    implementation "com.github.chrisbanes:PhotoView:${project.photoview}"

    // shimmer (loading view)
    implementation "com.facebook.shimmer:shimmer:${project.facebook_shimmer}"

    // paging
//    implementation "androidx.paging:paging-runtime:${project.paging}"
//    implementation "androidx.paging:paging-rxjava2:${project.paging}"

    // test
    testImplementation "junit:junit:${project.junit}"
    androidTestImplementation "androidx.test.ext:junit:1.1.2"
    androidTestImplementation "androidx.test.espresso:espresso-core:3.3.0"

}